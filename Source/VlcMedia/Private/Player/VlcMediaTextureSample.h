// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreTypes.h"
#include "IMediaTextureSample.h"
#include "Math/IntPoint.h"
#include "Misc/Timespan.h"
#include "Templates/SharedPointer.h"


/**
 * Texture sample generated by VlcMedia player.
 */
class FVlcMediaTextureSample
	: public IMediaTextureSample
{
public:

	/**
	 * Create and initialize a new instance.
	 *
	 * @param InBuffer The sample's frame buffer.
	 * @param InDim The sample buffer's width and height (in pixels).
	 * @param InOutputDim The sample's output width and height (in pixels).
	 * @param InSampleFormat The sample format.
	 * @param InStride Number of bytes per pixel row.
	 * @param InTime The sample time (in the player's local clock).
	 * @param InTimecode The global media time code the sample was generated for.
	 * @param InDuration The duration for which the sample is valid.
	 */
	FVlcMediaTextureSample(
		const TSharedPtr<void, ESPMode::ThreadSafe>& InBuffer,
		const FIntPoint& InDim,
		const FIntPoint& InOutputDim,
		EMediaTextureSampleFormat InSampleFormat,
		uint32 InStride,
		FTimespan InTime,
		FTimespan InTimecode,
		FTimespan InDuration
	)
		: Buffer(InBuffer)
		, Dim(InDim)
		, Duration(InDuration)
		, OutputDim(InOutputDim)
		, SampleFormat(InSampleFormat)
		, Stride(InStride)
		, Time(InTime)
		, Timecode(InTimecode)
	{ }

public:

	//~ IMediaTextureSample interface

	virtual const void* GetBuffer() const override
	{
		return Buffer.Get();
	}

	virtual FIntPoint GetDim() const override
	{
		return Dim;
	}

	virtual FTimespan GetDuration() const override
	{
		return Duration;
	}

	virtual EMediaTextureSampleFormat GetFormat() const override
	{
		return SampleFormat;
	}

	virtual FIntPoint GetOutputDim() const override
	{
		return OutputDim;
	}

	virtual uint32 GetStride() const override
	{
		return Stride;
	}

#if WITH_ENGINE
	virtual FRHITexture* GetTexture() const override
	{
		return nullptr;
	}
#endif //WITH_ENGINE

	virtual FTimespan GetTime() const override
	{
		return Time;
	}

	virtual FTimespan GetTimecode(bool /*Locked*/) const override
	{
		return Timecode;
	}

	virtual bool IsOutputSrgb() const override
	{
		return true;
	}

private:

	/** The sample's frame buffer. */
	TSharedPtr<void, ESPMode::ThreadSafe> Buffer;

	/** Width and height of the texture sample. */
	FIntPoint Dim;

	/** Duration for which the sample is valid. */
	FTimespan Duration;

	/** Width and height of the output. */
	FIntPoint OutputDim;

	/** The sample format. */
	EMediaTextureSampleFormat SampleFormat;

	/** Number of bytes per pixel row. */
	uint32 Stride;

	/** Play time for which the sample was generated. */
	FTimespan Time;

	/** Time code at which the sample is to be displayed. */
	FTimespan Timecode;
};
